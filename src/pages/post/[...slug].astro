---
import Disqus from '@/components/Disqus'
import ListRelatedPosts from '@/components/ListRelatedPosts'
import SButton from '@/components/mdx/SButton'
import Share from '@/components/Share'
import TableOfContents from '@/components/TableOfContents'
import { disqusConfig } from '@/data/disqus.config'
import BlogPost from '@/layouts/BlogPost'
import { getPosts } from '@/utils'
import { Code } from 'astro:components'
import { getCollection } from 'astro:content'
import { getCurrentLang } from 'src/components/utils/i18n'
const posts = await getCollection('blog')
const availableLanguages = ['en', 'uk', 'ru'] // ✅ Add all supported languages

export async function getStaticPaths() {
	const posts = await getPosts()
	const availableLanguages = ['en', 'uk', 'ru'] // ✅ Add all supported languages
	// ✅ Generate paths for all language versions of each post
	// ✅ Ensure only one language suffix is used
	const paths = posts.flatMap((post) => {
		const baseSlug = post.slug.replace(/-(en|uk|ru)$/, '') // ✅ Remove any existing suffix
		return availableLanguages.map((lang) => ({
			params: { slug: `${baseSlug}-${lang}` }, // ✅ Add suffix once
			props: { post, lang }
		}))
	})

	console.log(
		'🔗 Generated Paths:',
		paths.map((p) => p.params.slug)
	) // ✅ Debug output
	return paths
}

// Extract slug from URL
const { slug } = Astro.params
// ✅ Extract base slug (remove any language suffix)
const baseSlug = slug.replace(/-(en|uk|ru)$/, '')

// ✅ Detect the requested language from the URL slug
const requestedLang = slug.match(/-(en|uk|ru)$/)?.[1] || getCurrentLang() // Use slug language or localStorage fallback

console.log('🌍 Requested Language:', requestedLang)

// ✅ Find post with exact slug and requested language
let post = posts.find((p) => p.slug === `${baseSlug}-${requestedLang}`)

// ✅ Only fallback to English if no specific translation exists
if (!post && requestedLang !== 'en') {
	post = posts.find((p) => p.slug === `${baseSlug}-en`)
}

// 🚨 Handle case where post does not exist
if (!post) {
	throw new Error(`❌ Post not found: ${Astro.url.pathname}`)
}

console.log('📝 Serving Post:', post.slug, 'Language:', post.data.lang)

const { Content, headings, remarkPluginFrontmatter } = await post.render()

// ✅ Get related posts
const MAX_POSTS = 3
const getRelatedPosts = (post) => {
	const lowercaseTags = post.data.tags.map((tag) => tag.toLowerCase())
	const relatedPosts = posts.filter(
		(p) => p.slug !== post.slug && p.data.tags.some((t) => lowercaseTags.includes(t.toLowerCase()))
	)
	return relatedPosts.slice(0, MAX_POSTS)
}

const relatedPosts = getRelatedPosts(post)
const disqusEnabled = disqusConfig.enabled
---

<BlogPost
	id={post.id}
	data={post.data}
	headings={headings}
	readTime={remarkPluginFrontmatter.minutesRead}
>
	<div class='grid grid-cols-1 md:grid-cols-[20%_auto] gap-10 mt-8'>
		<!-- Sidebar -->
		<aside class='md:flex flex-col gap-8 hidden'>
			<Share />
			<div class='sticky top-24 self-start hidden md:block transition-all duration-200'>
				{headings && headings.length > 0 && <TableOfContents {headings} />}
			</div>
		</aside>

		<!-- Post Content -->
		<article class='max-w-full w-full'>
			<div class='prose prose-lg md:prose-xl dark:prose-invert mb-12 min-w-full'>
				<Content components={{ pre: Code, SButton }} />
			</div>

			<!-- Related Posts -->
			<footer>
				<h2 class='font-bold text-lg dark:text-white mb-6'>Related Posts</h2>
				<ListRelatedPosts posts={relatedPosts} />
			</footer>
		</article>
	</div>

	{disqusEnabled && <Disqus />}
</BlogPost>
